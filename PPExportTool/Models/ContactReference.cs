/* 
 * PracticePanther KISS Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace PracticePanther.Api.Model
{
    /// <summary>
    /// ContactReference
    /// </summary>
    [DataContract]
    public partial class ContactReference :  IEquatable<ContactReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactReference" /> class.
        /// </summary>
        /// <param name="AccountRef">AccountRef.</param>
        /// <param name="Id">Id (required).</param>
        /// <param name="DisplayName">DisplayName.</param>
        public ContactReference(AccountReference AccountRef = default(AccountReference), Guid? Id = default(Guid?), string DisplayName = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ContactReference and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            this.AccountRef = AccountRef;
            this.DisplayName = DisplayName;
        }
        
        /// <summary>
        /// Gets or Sets AccountRef
        /// </summary>
        [DataMember(Name="account_ref", EmitDefaultValue=false)]
        public AccountReference AccountRef { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactReference {\n");
            sb.Append("  AccountRef: ").Append(AccountRef).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactReference);
        }

        /// <summary>
        /// Returns true if ContactReference instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountRef == input.AccountRef ||
                    (this.AccountRef != null &&
                    this.AccountRef.Equals(input.AccountRef))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountRef != null)
                    hashCode = hashCode * 59 + this.AccountRef.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
