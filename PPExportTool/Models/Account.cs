/* 
 * PracticePanther KISS Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace PracticePanther.Api.Model
{
    /// <summary>
    /// An account is an entity that can represent either one contact, or multiple contacts. An account must contain at least one primary contact
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Number">This is the account number. If Auto-Numbering is turned on you can leave this field blank and PracticePanther will automatically assign the next available number.</param>
        /// <param name="CompanyName">Should be set only if this account represents a company.</param>
        /// <param name="AddressStreet1">AddressStreet1.</param>
        /// <param name="AddressStreet2">AddressStreet2.</param>
        /// <param name="AddressCity">AddressCity.</param>
        /// <param name="AddressState">AddressState.</param>
        /// <param name="AddressCountry">AddressCountry.</param>
        /// <param name="AddressZipCode">AddressZipCode.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="CompanyCustomFieldValues">This is a list of custom field values related to this company. Can only be used if company_name is set for this account.</param>
        /// <param name="AssignedToUsers">At least one user must be assigned to this matter. You can get the current user using get at /users/me.</param>
        /// <param name="Notes">These are company notes and can only be used if company_name is set for this account.</param>
        /// <param name="PrimaryContact">This is the primary contact for this account.</param>
        /// <param name="OtherContacts">If this account is a company, this will include any additional contacts other than the primary contact, if any.</param>
        public Account(Guid? Id = default(Guid?), int? Number = default(int?), string CompanyName = default(string), string AddressStreet1 = default(string), string AddressStreet2 = default(string), string AddressCity = default(string), string AddressState = default(string), string AddressCountry = default(string), string AddressZipCode = default(string), List<string> Tags = default(List<string>), List<CustomFieldValue> CompanyCustomFieldValues = default(List<CustomFieldValue>), List<UserReference> AssignedToUsers = default(List<UserReference>), string Notes = default(string), Contact PrimaryContact = default(Contact), List<Contact> OtherContacts = default(List<Contact>))
        {
            this.Id = Id;
            this.Number = Number;
            this.CompanyName = CompanyName;
            this.AddressStreet1 = AddressStreet1;
            this.AddressStreet2 = AddressStreet2;
            this.AddressCity = AddressCity;
            this.AddressState = AddressState;
            this.AddressCountry = AddressCountry;
            this.AddressZipCode = AddressZipCode;
            this.Tags = Tags;
            this.CompanyCustomFieldValues = CompanyCustomFieldValues;
            this.AssignedToUsers = AssignedToUsers;
            this.Notes = Notes;
            this.PrimaryContact = PrimaryContact;
            this.OtherContacts = OtherContacts;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// This is the display name for the contact. It is set automatically based on the user settings in the UI This is the display name for the contact. It is set automatically based on the user settings in the UI
        /// </summary>
        /// <value>This is the display name for the contact. It is set automatically based on the user settings in the UI This is the display name for the contact. It is set automatically based on the user settings in the UI</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; private set; }

        /// <summary>
        /// This is the account number. If Auto-Numbering is turned on you can leave this field blank and PracticePanther will automatically assign the next available number
        /// </summary>
        /// <value>This is the account number. If Auto-Numbering is turned on you can leave this field blank and PracticePanther will automatically assign the next available number</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Should be set only if this account represents a company
        /// </summary>
        /// <value>Should be set only if this account represents a company</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets AddressStreet1
        /// </summary>
        [DataMember(Name="address_street_1", EmitDefaultValue=false)]
        public string AddressStreet1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressStreet2
        /// </summary>
        [DataMember(Name="address_street_2", EmitDefaultValue=false)]
        public string AddressStreet2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressCity
        /// </summary>
        [DataMember(Name="address_city", EmitDefaultValue=false)]
        public string AddressCity { get; set; }

        /// <summary>
        /// Gets or Sets AddressState
        /// </summary>
        [DataMember(Name="address_state", EmitDefaultValue=false)]
        public string AddressState { get; set; }

        /// <summary>
        /// Gets or Sets AddressCountry
        /// </summary>
        [DataMember(Name="address_country", EmitDefaultValue=false)]
        public string AddressCountry { get; set; }

        /// <summary>
        /// Gets or Sets AddressZipCode
        /// </summary>
        [DataMember(Name="address_zip_code", EmitDefaultValue=false)]
        public string AddressZipCode { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// This is a list of custom field values related to this company. Can only be used if company_name is set for this account
        /// </summary>
        /// <value>This is a list of custom field values related to this company. Can only be used if company_name is set for this account</value>
        [DataMember(Name="company_custom_field_values", EmitDefaultValue=false)]
        public List<CustomFieldValue> CompanyCustomFieldValues { get; set; }

        /// <summary>
        /// At least one user must be assigned to this matter. You can get the current user using get at /users/me
        /// </summary>
        /// <value>At least one user must be assigned to this matter. You can get the current user using get at /users/me</value>
        [DataMember(Name="assigned_to_users", EmitDefaultValue=false)]
        public List<UserReference> AssignedToUsers { get; set; }

        /// <summary>
        /// updated_at can be used to sync contacts with PracticePanther. updated_at can be used to sync contacts with PracticePanther.
        /// </summary>
        /// <value>updated_at can be used to sync contacts with PracticePanther. updated_at can be used to sync contacts with PracticePanther.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// updated_at can be used to sync contacts with PracticePanther. updated_at can be used to sync contacts with PracticePanther.
        /// </summary>
        /// <value>updated_at can be used to sync contacts with PracticePanther. updated_at can be used to sync contacts with PracticePanther.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// These are company notes and can only be used if company_name is set for this account
        /// </summary>
        /// <value>These are company notes and can only be used if company_name is set for this account</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// This is the primary contact for this account
        /// </summary>
        /// <value>This is the primary contact for this account</value>
        [DataMember(Name="primary_contact", EmitDefaultValue=false)]
        public Contact PrimaryContact { get; set; }

        /// <summary>
        /// If this account is a company, this will include any additional contacts other than the primary contact, if any
        /// </summary>
        /// <value>If this account is a company, this will include any additional contacts other than the primary contact, if any</value>
        [DataMember(Name="other_contacts", EmitDefaultValue=false)]
        public List<Contact> OtherContacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  AddressStreet1: ").Append(AddressStreet1).Append("\n");
            sb.Append("  AddressStreet2: ").Append(AddressStreet2).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressState: ").Append(AddressState).Append("\n");
            sb.Append("  AddressCountry: ").Append(AddressCountry).Append("\n");
            sb.Append("  AddressZipCode: ").Append(AddressZipCode).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CompanyCustomFieldValues: ").Append(CompanyCustomFieldValues).Append("\n");
            sb.Append("  AssignedToUsers: ").Append(AssignedToUsers).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PrimaryContact: ").Append(PrimaryContact).Append("\n");
            sb.Append("  OtherContacts: ").Append(OtherContacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.AddressStreet1 == input.AddressStreet1 ||
                    (this.AddressStreet1 != null &&
                    this.AddressStreet1.Equals(input.AddressStreet1))
                ) && 
                (
                    this.AddressStreet2 == input.AddressStreet2 ||
                    (this.AddressStreet2 != null &&
                    this.AddressStreet2.Equals(input.AddressStreet2))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressState == input.AddressState ||
                    (this.AddressState != null &&
                    this.AddressState.Equals(input.AddressState))
                ) && 
                (
                    this.AddressCountry == input.AddressCountry ||
                    (this.AddressCountry != null &&
                    this.AddressCountry.Equals(input.AddressCountry))
                ) && 
                (
                    this.AddressZipCode == input.AddressZipCode ||
                    (this.AddressZipCode != null &&
                    this.AddressZipCode.Equals(input.AddressZipCode))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.CompanyCustomFieldValues == input.CompanyCustomFieldValues ||
                    this.CompanyCustomFieldValues != null &&
                    this.CompanyCustomFieldValues.SequenceEqual(input.CompanyCustomFieldValues)
                ) && 
                (
                    this.AssignedToUsers == input.AssignedToUsers ||
                    this.AssignedToUsers != null &&
                    this.AssignedToUsers.SequenceEqual(input.AssignedToUsers)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.PrimaryContact == input.PrimaryContact ||
                    (this.PrimaryContact != null &&
                    this.PrimaryContact.Equals(input.PrimaryContact))
                ) && 
                (
                    this.OtherContacts == input.OtherContacts ||
                    this.OtherContacts != null &&
                    this.OtherContacts.SequenceEqual(input.OtherContacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.AddressStreet1 != null)
                    hashCode = hashCode * 59 + this.AddressStreet1.GetHashCode();
                if (this.AddressStreet2 != null)
                    hashCode = hashCode * 59 + this.AddressStreet2.GetHashCode();
                if (this.AddressCity != null)
                    hashCode = hashCode * 59 + this.AddressCity.GetHashCode();
                if (this.AddressState != null)
                    hashCode = hashCode * 59 + this.AddressState.GetHashCode();
                if (this.AddressCountry != null)
                    hashCode = hashCode * 59 + this.AddressCountry.GetHashCode();
                if (this.AddressZipCode != null)
                    hashCode = hashCode * 59 + this.AddressZipCode.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.CompanyCustomFieldValues != null)
                    hashCode = hashCode * 59 + this.CompanyCustomFieldValues.GetHashCode();
                if (this.AssignedToUsers != null)
                    hashCode = hashCode * 59 + this.AssignedToUsers.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.PrimaryContact != null)
                    hashCode = hashCode * 59 + this.PrimaryContact.GetHashCode();
                if (this.OtherContacts != null)
                    hashCode = hashCode * 59 + this.OtherContacts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
