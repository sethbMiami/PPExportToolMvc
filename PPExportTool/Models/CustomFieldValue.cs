/* 
 * PracticePanther KISS Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace PracticePanther.Api.Model
{
    /// <summary>
    /// CustomFieldValue
    /// </summary>
    [DataContract]
    public partial class CustomFieldValue :  IEquatable<CustomFieldValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFieldValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldValue" /> class.
        /// </summary>
        /// <param name="CustomFieldRef">This is a reference to the custom field we are setting this value for. (required).</param>
        /// <param name="ValueBoolean">Used only if CustomField.Type &#x3D;&#x3D; Checkbox.</param>
        /// <param name="ContactRef">Used only if CustomField.Type &#x3D;&#x3D; Contact.</param>
        /// <param name="ValueDateTime">Used only if CustomField.Type &#x3D;&#x3D; Date || CustomField.Type &#x3D;&#x3D; DateTime.</param>
        /// <param name="ValueNumber">Used only if CustomField.Type &#x3D;&#x3D; Number || CustomField.Type &#x3D;&#x3D; Currency.</param>
        /// <param name="ValueString">Used only if CustomField.Type &#x3D;&#x3D; TextEditor || CustomField.Type &#x3D;&#x3D; DropDownList.</param>
        public CustomFieldValue(CustomFieldRef CustomFieldRef = default(CustomFieldRef), bool? ValueBoolean = default(bool?), ContactReference ContactRef = default(ContactReference), DateTime? ValueDateTime = default(DateTime?), double? ValueNumber = default(double?), string ValueString = default(string))
        {
            // to ensure "CustomFieldRef" is required (not null)
            if (CustomFieldRef == null)
            {
                throw new InvalidDataException("CustomFieldRef is a required property for CustomFieldValue and cannot be null");
            }
            else
            {
                this.CustomFieldRef = CustomFieldRef;
            }
            this.ValueBoolean = ValueBoolean;
            this.ContactRef = ContactRef;
            this.ValueDateTime = ValueDateTime;
            this.ValueNumber = ValueNumber;
            this.ValueString = ValueString;
        }
        
        /// <summary>
        /// This is a reference to the custom field we are setting this value for.
        /// </summary>
        /// <value>This is a reference to the custom field we are setting this value for.</value>
        [DataMember(Name="custom_field_ref", EmitDefaultValue=false)]
        public CustomFieldRef CustomFieldRef { get; set; }

        /// <summary>
        /// Used only if CustomField.Type &#x3D;&#x3D; Checkbox
        /// </summary>
        /// <value>Used only if CustomField.Type &#x3D;&#x3D; Checkbox</value>
        [DataMember(Name="value_boolean", EmitDefaultValue=false)]
        public bool? ValueBoolean { get; set; }

        /// <summary>
        /// Used only if CustomField.Type &#x3D;&#x3D; Contact
        /// </summary>
        /// <value>Used only if CustomField.Type &#x3D;&#x3D; Contact</value>
        [DataMember(Name="contact_ref", EmitDefaultValue=false)]
        public ContactReference ContactRef { get; set; }

        /// <summary>
        /// Used only if CustomField.Type &#x3D;&#x3D; Date || CustomField.Type &#x3D;&#x3D; DateTime
        /// </summary>
        /// <value>Used only if CustomField.Type &#x3D;&#x3D; Date || CustomField.Type &#x3D;&#x3D; DateTime</value>
        [DataMember(Name="value_date_time", EmitDefaultValue=false)]
        public DateTime? ValueDateTime { get; set; }

        /// <summary>
        /// Used only if CustomField.Type &#x3D;&#x3D; Number || CustomField.Type &#x3D;&#x3D; Currency
        /// </summary>
        /// <value>Used only if CustomField.Type &#x3D;&#x3D; Number || CustomField.Type &#x3D;&#x3D; Currency</value>
        [DataMember(Name="value_number", EmitDefaultValue=false)]
        public double? ValueNumber { get; set; }

        /// <summary>
        /// Used only if CustomField.Type &#x3D;&#x3D; TextEditor || CustomField.Type &#x3D;&#x3D; DropDownList
        /// </summary>
        /// <value>Used only if CustomField.Type &#x3D;&#x3D; TextEditor || CustomField.Type &#x3D;&#x3D; DropDownList</value>
        [DataMember(Name="value_string", EmitDefaultValue=false)]
        public string ValueString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldValue {\n");
            sb.Append("  CustomFieldRef: ").Append(CustomFieldRef).Append("\n");
            sb.Append("  ValueBoolean: ").Append(ValueBoolean).Append("\n");
            sb.Append("  ContactRef: ").Append(ContactRef).Append("\n");
            sb.Append("  ValueDateTime: ").Append(ValueDateTime).Append("\n");
            sb.Append("  ValueNumber: ").Append(ValueNumber).Append("\n");
            sb.Append("  ValueString: ").Append(ValueString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFieldValue);
        }

        /// <summary>
        /// Returns true if CustomFieldValue instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomFieldRef == input.CustomFieldRef ||
                    (this.CustomFieldRef != null &&
                    this.CustomFieldRef.Equals(input.CustomFieldRef))
                ) && 
                (
                    this.ValueBoolean == input.ValueBoolean ||
                    (this.ValueBoolean != null &&
                    this.ValueBoolean.Equals(input.ValueBoolean))
                ) && 
                (
                    this.ContactRef == input.ContactRef ||
                    (this.ContactRef != null &&
                    this.ContactRef.Equals(input.ContactRef))
                ) && 
                (
                    this.ValueDateTime == input.ValueDateTime ||
                    (this.ValueDateTime != null &&
                    this.ValueDateTime.Equals(input.ValueDateTime))
                ) && 
                (
                    this.ValueNumber == input.ValueNumber ||
                    (this.ValueNumber != null &&
                    this.ValueNumber.Equals(input.ValueNumber))
                ) && 
                (
                    this.ValueString == input.ValueString ||
                    (this.ValueString != null &&
                    this.ValueString.Equals(input.ValueString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomFieldRef != null)
                    hashCode = hashCode * 59 + this.CustomFieldRef.GetHashCode();
                if (this.ValueBoolean != null)
                    hashCode = hashCode * 59 + this.ValueBoolean.GetHashCode();
                if (this.ContactRef != null)
                    hashCode = hashCode * 59 + this.ContactRef.GetHashCode();
                if (this.ValueDateTime != null)
                    hashCode = hashCode * 59 + this.ValueDateTime.GetHashCode();
                if (this.ValueNumber != null)
                    hashCode = hashCode * 59 + this.ValueNumber.GetHashCode();
                if (this.ValueString != null)
                    hashCode = hashCode * 59 + this.ValueString.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
